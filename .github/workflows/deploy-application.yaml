name: Deploy Infrastructure

on:
  workflow_call:
      inputs:
        environment:
          required: true
          description: "Environment to run the deploy on"
          type: string
        application_name:
          description: "Name of Application to deploy"
          type: string
          required: true


concurrency: ${{github.repository}}-${{ inputs.environment }}-deployinfrastructure
jobs:
  deploy:
    name: Deploy ${{ inputs.environment }} -> ${{inputs.infrastructure_path}}
    runs-on: ubuntu-latest
    env:
      tf_version: '1.2.8'
      tg_version: 'v0.38.9'

    permissions:
      contents: read
      packages: write
      id-token: 'write'
    environment: 
      name: ${{inputs.environment}}
      url: ${{ steps.urlset.outputs.url_output }}
    steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Load Environments
          id: loadenv
          run: |
            echo "::set-output name=envconfig::$(cd ./envs/${{inputs.environment}}; jq -s -c '. | add' *.json)"
        - name: Echo Environments
          run: |
            echo "${{fromJson( steps.loadenv.outputs.envconfig )}}"
        - name: Get Runtime ENV Requirements
          run: |
            echo "runtimeenvs=$(cat ./src/${{inputs.application_name}}/config.silver | jq -c -r ' .gcpsettings.cloudrun.requiredEnv | select (.!=null)  | join(",")')" >> $GITHUB_ENV 
          env: 
            repo: ${{github.repository}}
        - name: Construct Runtime Env Payload
          id: runtimeenv
          run: |
            echo "::set-output name=runtimeenv::$(jq -R -c -n  --argjson o1 ${{toJson( steps.loadenv.outputs.envconfig) }} '[$o1 | to_entries | .[] | select( .key  | IN(env.runtimeenvs | split(",")[])) | .[.key] = .value | del(.key, .value)] | add')"
        - name: Deploy
          uses: datadrivers/terragrunt-action@v0
          with:
            aws-role-to-assume: "idunno"
            terragrunt-working-directory: "./terragrunt/apps/${{inputs.application_name}}"
            terraform-version: ${{ env.tf_version }}
            terragrunt-version: ${{ env.tg_version }}
            use-gcloud-auth: "true"
            gcp-workload-identity-provider:  ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER}}
            gcp-service-account-email: ${{secrets.BUILD_USER_EMAIL}}
            gcp-project-id: "lab-operations"
            skip-caches: "true"
            use-ssh-agent: "true"
            ssh-private-key: ${{ secrets.TG_GH_AGLABS_TF_MODULES_SSH_DEPLOY_KEY }}
            terragrunt-command: |
              terragrunt run-all apply --terragrunt-non-interactive  
          env:
            state_encryption_key: ${{ secrets.TF_STATE_ENCRYPTION_KEY}}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            GCP_PROJECT_ID: ${{ fromJson( steps.loadenv.outputs.envconfig ).gcp_project_id }}
            CONFIG_VARS: ${{ steps.loadenv.outputs.envconfig }}
            secrets:        ${{ toJson(secrets) }}
            RUNTIME_ENVS: ${{ steps.runtimeenv.outputs.runtimeenv }}
            crimage:        "us-central1-docker.pkg.dev/${{fromJson( steps.loadenv.outputs.envconfig ).gcp_project_id}}/github-tmp/${{inputs.application_name}}:latest"
        - name: Set Environment URL
          id: urlset
          run: |
            echo "::set-output name=url_output::https://console.cloud.google.com/home/dashboard?project=${{fromJson( steps.loadenv.outputs.envconfig ).gcp_project_id}}"
