
name: Reusable Deploy Script
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      ENV_POSTFIX:
        required: true 
        type: string
      ENV_LABEL:
        required: true
        type: string
    secrets:
      NPMRC_PACKAGE_DEPLOY_CONFIG:
        required: true
      wif_provider:
        required: true
      TERRAFORM_MODULE_KEY:
        required: true
      TFADMIN_FOLDER_ID:
        required: true
      TFADMIN_GCP_BILLING_ACCOUNT_ID:
        required: true
      GCP_TF_SERVICE_ACCOUNT_NAME:
        required: true
      TF_STATE_BUCKET:
        required: true


# Add "id-token" with the intended permissions.
permissions:
  packages: 'read'
  contents: 'read'
  id-token: 'write'

concurrency: ${{ inputs.environment }}-${{github.event.number}} #perhaps needs pull request on here as well
jobs:
  setup:
    name: Setup
    environment: 
        name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      projectid: ${{ steps.vars-pid.outputs.pid }}
      postfix: ${{ steps.vars-postfix.outputs.postfix }}
      functions: ${{ steps.generate-matrix.outputs.functions }}
      files_exists: ${{ steps.check_common_docker.outputs.files_exists }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Postfix for Staging / Prod
      if: ${{github.event.number == ''}}
      run: echo "postfix=${{inputs.ENV_POSTFIX}}" >> $GITHUB_ENV
    
    - name: Set Postfix for Pull Requests
      if: ${{github.event.number != ''}}
      run: echo "postfix=${{inputs.ENV_POSTFIX}}-${{github.event.number}}" >> $GITHUB_ENV

    - name: Get postfix
      id: vars-postfix
      run: | 
        echo ::set-output name=postfix::$(echo "${{env.postfix}}" | base64)

    - name: AGLABS Builder
      run: |
        mkdir output
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
        docker pull ghcr.io/silver-labs/lab-builder:v1.1.2
        docker run -v $(pwd)/output:/output -v $(pwd)/src:/src -v $(pwd):/tf ghcr.io/silver-labs/lab-builder:v1.1.2
  
    # Gain oauthtoken for GCP SA user
    - name: Authorize to GCP
      id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: ${{ secrets.wif_provider }} # this is the output provider_name from the TF module
        service_account: ${{ secrets.GCP_TF_SERVICE_ACCOUNT_NAME }}  # this is a SA email configured using the TF module with access to YOUR-GCS-BUCKET
        token_format: access_token

    - name: Cache projectid 
      id: cache-projectid
      uses: actions/cache@v2
      with:
        path: pid.tmp
        key: ${{ github.repository }}-${{ env.postfix }}-pid.tmp

    # Checkout Terraform Modules
    - name: Checkout Terraform Modules
      if: stepsgclouyd init.cache-projectid.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: silver-labs/ag-terraform-modules
        ssh-key: ${{ secrets.TERRAFORM_MODULE_KEY }}
        path: ag-terraform-modules

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      if: steps.cache-projectid.outputs.cache-hit != 'true'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      if: steps.cache-projectid.outputs.cache-hit != 'true'
      run: terraform init -backend-config "bucket=${{secrets.TF_STATE_BUCKET}}" -backend-config "prefix=${{github.repository}}-${{env.postfix}}"
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format 
      if: steps.cache-projectid.outputs.cache-hit != 'true'
      run: terraform fmt 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: steps.cache-projectid.outputs.cache-hit != 'true'
      run: terraform plan -target=google_project.project -target=google_artifact_registry_repository.repo -target=google_storage_bucket.dataflow_template
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'


      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: steps.cache-projectid.outputs.cache-hit != 'true'
      run: terraform apply -target=google_project.project -target=google_artifact_registry_repository.repo -target=google_storage_bucket.dataflow_template -auto-approve
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'

    - name: Terraform Output
      if: steps.cache-projectid.outputs.cache-hit != 'true'
      run: |
        terraform output -raw project_id > pid.tmp
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'

    - name: Get projectid
      id: vars-pid
      run: |
        echo ::set-output name=pid::$(cat pid.tmp) 

    - name: Generate Function Diff List
      id: generate-matrix
      run: |-
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
        gcloud artifacts docker tags list us-central1-docker.pkg.dev/lab-operations/${{ steps.vars-pid.outputs.pid }}/ --format=json | jq 'group_by(.version) | map({function: (.[0].image | split("/")[-1]), version: ("sha256:" + (.[0].version | split("sha256:")[1])), tags: [.[] | .tag | split("tags/")[1]]}) | map({function, version, latest: .tags | contains(["latest"]), tags: .tags}) | map(select(.latest) | {function, tag: (.tags | map(select(. | contains("latest")|not)))[0], github: false})' > ./output/registry.json
        jq -R -s -c -n --argfile o1 ./output/function_checksums.tmp --argfile o2 ./output/registry.json '$o1 +  $o2 | group_by(.function) | map({function: .[0].function, github: ( map( select( .github == true) | .tag)[0]), gcp: ( map( select( .github == true | not) | .tag)[0])}) | map(select(.github == .gcp| not)) | map(.function+"#"+.github)' > ./output/buildlist.tmp
        jq -R -s -c -n --argfile o1 ./output/buildlist.tmp '$o1 + ["Build"]' > ./output/buildlist.final.tmp
        echo ""::set-output name=functions::$(cat ./output/buildlist.final.tmp)""
      shell: bash  
      
    - name: Check file existence
      id: check_common_docker
      uses: andstor/file-existence-action@v1
      with:
        files: "src/common/Dockerfile"

    - name: Set up Docker Buildx
      if: steps.check_common_docker.outputs.files_exists == 'true'
      uses: docker/setup-buildx-action@v2

    - name: Build and push
      if: steps.check_common_docker.outputs.files_exists == 'true'
      uses: docker/build-push-action@v2
      with:
        context: ./src/common/
        file: ./src/common/Dockerfile
        tags: common-image:latest
        outputs: type=docker,dest=/tmp/common-image.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: common-image
        path: /tmp/common-image.tar
        
    - uses: actions/upload-artifact@v2          
      with:
        name: functionsconfig
        path: |
          ./output/
        
  build:
    if: ${{ needs.setup.outputs.functions != '[]' && needs.setup.outputs.functions != ''}}
    needs: [setup]
    strategy:
      matrix:
        function: ${{ fromJSON(needs.setup.outputs.functions) }}
    name: ${{ matrix.function }} => Build
    environment:
        name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      if: matrix.function != 'Build'
      uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      if: matrix.function != 'Build'
      with:
        name: functionsconfig
        path: output

    - name: Create Variables
      if: matrix.function != 'Build'
      run: |
        echo "postfix=$(echo ${{needs.setup.outputs.postfix}} | base64 --decode)" >> $GITHUB_ENV
        echo "imagename=${fname%#*}" >> $GITHUB_ENV
        echo "imagechecksum=${fname##*\#}" >> $GITHUB_ENV
      env:
        fname: ${{ matrix.function }}

    - name: Create get image details
      if: matrix.function != 'Build'
      run: |
        echo "sourcepath=$(cat ./output/functions.config.json | jq -c -r '.[] | select( .name == env.imagename ) | .path')" >> $GITHUB_ENV
        echo "imagetype=$(cat ./output/functions.config.json | jq -c -r '.[] | select( .name == env.imagename ) | .type')" >> $GITHUB_ENV
        echo "imagesubtype=$(cat ./output/functions.config.json | jq -c -r '.[] | select( .name == env.imagename ) | .subtype')" >> $GITHUB_ENV


    # Gain oauthtoken for GCP SA user
    - name: Authorize to GCP
      if: matrix.function != 'Build'
      id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: ${{ secrets.wif_provider }} # this is the output provider_name from the TF module
        service_account: ${{ secrets.GCP_TF_SERVICE_ACCOUNT_NAME }}  # this is a SA email configured using the TF module with access to YOUR-GCS-BUCKET
        token_format: access_token

    - name: Download artifact
      if: matrix.function != 'Build' && needs.setup.outputs.files_exists == 'true'
      uses: actions/download-artifact@v2
      with:
          name: common-image
          path: /tmp

    - name: Login to Artifact Registry
      if: matrix.function != 'Build' 
      uses: docker/login-action@v1
      with:
        registry: us-central1-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Load Docker image
      if: matrix.function != 'Build' && needs.setup.outputs.files_exists == 'true'
      run: |
        docker load --input /tmp/common-image.tar
        docker image ls -a

    - name: npm add .npm to src
      if: matrix.function != 'Build'
      run: echo -en "$npmrc" >| ./src/${{env.sourcepath}}/.npmrc \;
      shell: bash
      env:
        npmrc : ${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}

    - id: docker_push
      if: matrix.function != 'Build'
      name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./src/${{env.sourcepath}}
        push: true
        tags: |
          "us-central1-docker.pkg.dev/lab-operations/${{needs.setup.outputs.projectid}}/${{env.imagename}}:latest"
          "us-central1-docker.pkg.dev/lab-operations/${{needs.setup.outputs.projectid}}/${{env.imagename}}:${{env.imagechecksum}}"

  terraform:
    name: 'Terraform'
    needs: [setup,build]
    environment:
        name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
    - run: | 
        echo -n "postfix=$(echo ${{needs.setup.outputs.postfix}} | base64 --decode)" >> $GITHUB_ENV


    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: json-files
      run: |
        mkdir output
      shell: bash

    - uses: actions/download-artifact@v2
      with:
        name: functionsconfig
        path: output

    - name: echo nongateway configuration
      run: cat ./output/nongateway.functions.config.json
      shell: bash
      
    - name: echo gateway configuration
      run: cat ./output/gateway.functions.config.json
      shell: bash

    # Checkout Terraform Modules
    - name: Checkout Terraform Modules
      uses: actions/checkout@v2
      with:
        repository: silver-labs/ag-terraform-modules
        ssh-key: ${{ secrets.TERRAFORM_MODULE_KEY }}
        path: ag-terraform-modules

    # Gain oauthtoken for GCP SA user
    - name: Authorize to GCP
      id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: ${{ secrets.wif_provider }} # this is the output provider_name from the TF module
        service_account: ${{ secrets.GCP_TF_SERVICE_ACCOUNT_NAME }}  # this is a SA email configured using the TF module with access to YOUR-GCS-BUCKET
        token_format: access_token

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Set Postfix for Staging / Prod
      if: ${{github.event.number == ''}}
      run: echo "postfix=${{inputs.ENV_POSTFIX}}" >> $GITHUB_ENV
    
    - name: Set Postfix for Pull Requests
      if: ${{github.event.number != ''}}
      run: echo "postfix=${{inputs.ENV_POSTFIX}}-${{github.event.number}}" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config "bucket=${{secrets.TF_STATE_BUCKET}}" -backend-config "prefix=${{github.repository}}-${{env.postfix}}"
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out tfplan.binary
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'

    - name: Terraform show
      run: terraform show -json tfplan.binary > plan.json
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'

    - name: Terraform Apply
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        TF_VAR_GCP_ACCESS_TOKEN: ${{steps.auth.outputs.access_token}}
        TF_VAR_GCP_BILLING: ${{secrets.TFADMIN_GCP_BILLING_ACCOUNT_ID}}
        TF_VAR_ENV_POSTFIX: '${{env.postfix}}'
        TF_VAR_STATE_NAME: '${{github.repository}}-${{env.postfix}}'
        TF_VAR_FOLDER_ID: ${{secrets.TFADMIN_FOLDER_ID}}
        TF_VAR_SECRETS: '${{ toJson(secrets) }}'
        TF_VAR_AGLABS_NPM: '${{secrets.NPMRC_PACKAGE_DEPLOY_CONFIG}}'
        TF_VAR_ENV_LABEL: '${{inputs.ENV_LABEL}}'
